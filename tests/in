#include "../s21_matrix.h"
#include <check.h>
#include <stdbool.h>

#define EPS (1.0e-6)

void create_tc(int m, int n, err_t expected) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_create_matrix(m, n, &result);

  ck_assert_msg(err_code == expected, "expected: %d, got: %d", expected, err_code);
  if (expected == OK) {
    ck_assert_msg(result.rows == m, "expected_rows: %d, got_rows: %d", m, result.rows);
    ck_assert_msg(result.columns == n, "expected_columns: %d, got_columns: %d", n, result.columns);
    ck_assert_msg(result.matrix != NULL, "matrix is NULL");
  }
  s21_remove_matrix(&result);
}

void remove_tc(matrix_t *A) {
  s21_remove_matrix(A);
  if (A != NULL) {
    ck_assert_msg(A->rows == 0, "expected_rows: 0, got_rows: %d", A->rows);
    ck_assert_msg(A->columns == 0, "expected_columns: 0, got_columns: %d", A->columns);
    ck_assert_msg(A->matrix == NULL, "matrix isn't NULL");
  }
}

void equalent_tc(matrix_t *A, matrix_t *B, cmp_result expected) {
  cmp_result result = s21_eq_matrix(A, B);
  ck_assert_msg(result == expected, "expected: %d, got: %d", expected, result);
  s21_remove_matrix(A);
  s21_remove_matrix(B);
}

void sum_tc(matrix_t *A, matrix_t *B, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_sum_matrix(A, B, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(B);
  s21_remove_matrix(&result);
  s21_remove_matrix(expected);
}

void sub_tc(matrix_t *A, matrix_t *B, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_sub_matrix(A, B, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(B);
  s21_remove_matrix(&result);
  s21_remove_matrix(expected);
}

// void numeration_matrix(matrix_t *matrix) {
//   int counter = 0;
//   for (int i = 0; i < matrix->rows; ++i) {
//     for (int j = 0; j < matrix->columns; ++j) {
//       matrix->matrix[i][j] = counter;
//       counter += 1;
//     }
//   }
// }

void multiply_number_tc(matrix_t *A, double number, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_mult_number(A, number, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(&result);
  s21_remove_matrix(expected);
}

void mul_tc(matrix_t *A, matrix_t *B, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_mult_matrix(A, B, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(B);
  s21_remove_matrix(expected);
  s21_remove_matrix(&result);
}

void determinant_tc(matrix_t *A, double expected, err_t expected_code) {
  double result = 0;
  err_t err_code = s21_determinant(A, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    ck_assert_msg(fabs(expected - result) < EPS, "expected: %lf, got: %lf", expected, result);
  }
  s21_remove_matrix(A);
}

void inverse_tc(matrix_t *A, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_inverse_matrix(A, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(expected);
  s21_remove_matrix(&result);
}

void transpose_tc(matrix_t *A, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_transpose(A, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(expected);
  s21_remove_matrix(&result);
}

void complements_tc(matrix_t *A, matrix_t *expected, err_t expected_code) {
  matrix_t result = (matrix_t){0};
  err_t err_code = s21_calc_complements(A, &result);
  ck_assert_msg(err_code == expected_code, "err_code expected: %d, got: %d", expected_code, err_code);
  if (expected_code == OK) {
    bool is_eq = s21_eq_matrix(&result, expected);
    ck_assert(is_eq == SUCCESS);
  }
  s21_remove_matrix(A);
  s21_remove_matrix(expected);
  s21_remove_matrix(&result);
}

#test create_1
create_tc(6, 0, INCORRECT_MATRIX);

#test create_2
create_tc(0, 6, INCORRECT_MATRIX);

#test create_3
create_tc(0, 0, INCORRECT_MATRIX);

#test create_4
create_tc(-1, 8, INCORRECT_MATRIX);

#test create_5
create_tc(-1, -8, INCORRECT_MATRIX);

#test create_6
create_tc(1, 1, OK);

#test create_7
create_tc(4, 2, OK);

#test create_8
create_tc(1, 2, OK);

#test remove_1
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 1.0; A.matrix[0][1] = 22.4f; A.matrix[0][2] = 333.0;
  A.matrix[1][0] = 1.0; A.matrix[1][1] = 22.4f; A.matrix[1][2] = 333.0;
  A.matrix[2][0] = 1.0; A.matrix[2][1] = 22.4f; A.matrix[2][2] = 333.0;
  remove_tc(&A);

#test remove_2
  matrix_t A = (matrix_t){0};
  s21_create_matrix(1, 1, &A);
  A.matrix[0][0] = 1.0;
  remove_tc(&A);

#test remove_3
  matrix_t A = (matrix_t){.columns = 0, .rows = 0, .matrix = NULL};
  remove_tc(&A);

#test remove_4
  remove_tc(NULL);

#test equal_1
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 1.0; A.matrix[0][1] = 22.4f; A.matrix[0][2] = 333.0;
  A.matrix[1][0] = 1.0; A.matrix[1][1] = 22.4f; A.matrix[1][2] = 333.0;
  A.matrix[2][0] = 1.0; A.matrix[2][1] = 22.4f; A.matrix[2][2] = 333.0;
  matrix_t B = (matrix_t){0};
  s21_create_matrix(3, 3, &B);
  B.matrix[0][0] = 1.0; B.matrix[0][1] = 0.0; B.matrix[0][2] = 0.0;
  B.matrix[1][0] = 1.0; B.matrix[1][1] = 0.0; B.matrix[1][2] = 0.0;
  B.matrix[2][0] = 1.0; B.matrix[2][1] = 0.0; B.matrix[2][2] = 0.0;

  equalent_tc(&A, &B, FAILURE);

#test equal_2
  matrix_t A = (matrix_t){0};
  s21_create_matrix(1, 1, &A);
  A.matrix[0][0] = 1.0;
  matrix_t B = (matrix_t){0};
  s21_create_matrix(1, 1, &B);
  B.matrix[0][0] = 1.0;

  equalent_tc(&A, &B, SUCCESS);

#test equal_3
  matrix_t A = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 1.0;
  A.matrix[1][0] = 1.0;
  A.matrix[1][1] = 1.0;

  equalent_tc(&A, &A, SUCCESS);

#test equal_4
  matrix_t A = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  matrix_t B = (matrix_t){0};
  s21_create_matrix(3, 3, &B);

  equalent_tc(&A, &B, FAILURE);

#test transpose_1
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &expected);
  // 0 1
  // 2 3
  A.matrix[0][0] = 0.0;
  A.matrix[0][1] = 1.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 3.0;
  // 0 2
  // 1 3
  expected.matrix[0][0] = 0.0;
  expected.matrix[0][1] = 2.0;
  expected.matrix[1][0] = 1.0;
  expected.matrix[1][1] = 3.0;
  transpose_tc(&A, &expected, OK);

#test transpose_2
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(1, 1, &A);
  s21_create_matrix(1, 1, &expected);
  A.matrix[0][0] = 0.0;
  expected.matrix[0][0] = 0.0;
  transpose_tc(&A, &expected, OK);

#test transpose_3
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &expected);
  // 0 0
  // 1 1
  A.matrix[0][0] = 0.0;
  A.matrix[0][1] = 0.0;
  A.matrix[1][0] = 1.0;
  A.matrix[1][1] = 1.0;
  // 0 1
  // 0 1
  expected.matrix[0][0] = 0.0;
  expected.matrix[0][1] = 1.0;
  expected.matrix[1][0] = 0.0;
  expected.matrix[1][1] = 1.0;
  transpose_tc(&A, &expected, OK);

#test transpose_4
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(2, 3, &A);
  s21_create_matrix(3, 2, &expected);
  // 0 0 1
  // 1 1 2
  A.matrix[0][0] = 0.0;
  A.matrix[0][1] = 0.0;
  A.matrix[0][2] = 1.0;
  A.matrix[1][0] = 1.0;
  A.matrix[1][1] = 1.0;
  A.matrix[1][2] = 2.0;
  // 0 1
  // 0 1
  // 1 2
  expected.matrix[0][0] = 0.0;
  expected.matrix[0][1] = 1.0;
  expected.matrix[1][0] = 0.0;
  expected.matrix[1][1] = 1.0;
  expected.matrix[2][0] = 1.0;
  expected.matrix[2][1] = 2.0;
  transpose_tc(&A, &expected, OK);

#test transpose_5
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(3, 2, &A);
  s21_create_matrix(2, 3, &expected);
  // 1 4
  // 2 5
  // 3 6
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 5.0;
  A.matrix[2][0] = 3.0;
  A.matrix[2][1] = 6.0;
  // 1 2 3
  // 4 5 6
  expected.matrix[0][0] = 1.0;
  expected.matrix[0][1] = 2.0;
  expected.matrix[0][2] = 3.0;
  expected.matrix[1][0] = 4.0;
  expected.matrix[1][1] = 5.0;
  expected.matrix[1][2] = 6.0;
  transpose_tc(&A, &expected, OK);

#test sum_1
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &B);
  s21_create_matrix(2, 2, &expected);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 2.0;
  A.matrix[1][0] = 1.0;
  A.matrix[1][1] = 1.0;
  B.matrix[0][0] = 2.0;
  B.matrix[0][1] = 2.0;
  B.matrix[1][0] = 1.0;
  B.matrix[1][1] = 1.0;
  expected.matrix[0][0] = 4.0;
  expected.matrix[0][1] = 4.0;
  expected.matrix[1][0] = 2.0;
  expected.matrix[1][1] = 2.0;
  sum_tc(&A, &B, &expected, OK);

#test sum_2
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(1, 1, &A);
  s21_create_matrix(1, 1, &B);
  s21_create_matrix(1, 1, &expected);
  A.matrix[0][0] = 5.1f;
  B.matrix[0][0] = 2.2f;
  expected.matrix[0][0] = 7.3f;
  sum_tc(&A, &B, &expected, OK);

#test sum_3
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(0, 1, &A);
  s21_create_matrix(1, 1, &B);
  s21_create_matrix(1, 1, &expected);
  B.matrix[0][0] = 2.2f;
  expected.matrix[0][0] = 7.3f;
  sum_tc(&A, &B, &expected, INCORRECT_MATRIX);

#test sum_4
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(1, 1, &A);
  s21_create_matrix(0, 1, &B);
  s21_create_matrix(1, 1, &expected);
  A.matrix[0][0] = 2.2f;
  expected.matrix[0][0] = 7.3f;
  sum_tc(&A, &B, &expected, INCORRECT_MATRIX);

#test sum_5
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(1, 1, &A);
  s21_create_matrix(2, 2, &B);
  s21_create_matrix(2, 2, &expected);
  sum_tc(&A, &B, &expected, CALCULATION_ERROR);

#test sub_1
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &B);
  s21_create_matrix(2, 2, &expected);
  A.matrix[0][0] = 4.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 2.0;
  B.matrix[0][0] = 2.0;
  B.matrix[0][1] = 2.0;
  B.matrix[1][0] = 1.0;
  B.matrix[1][1] = 1.0;
  expected.matrix[0][0] = 2.0;
  expected.matrix[0][1] = 2.0;
  expected.matrix[1][0] = 1.0;
  expected.matrix[1][1] = 1.0;
  sub_tc(&A, &B, &expected, OK);

#test sub_2
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(1, 1, &A);
  s21_create_matrix(1, 1, &B);
  s21_create_matrix(1, 1, &expected);
  
  A.matrix[0][0] = 7.3f;
  B.matrix[0][0] = 2.2f;
  expected.matrix[0][0] = 5.1f;
  sub_tc(&A, &B, &expected, OK);

#test multiply_number_1
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &expected);
  A.matrix[0][0] = 4.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 2.0;
  expected.matrix[0][0] = 4.0;
  expected.matrix[0][1] = 4.0;
  expected.matrix[1][0] = 2.0;
  expected.matrix[1][1] = 2.0;
  multiply_number_tc(&A, 1, &expected, OK);

#test multiply_number_2
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &expected);
  A.matrix[0][0] = 1.1f;
  A.matrix[0][1] = -2.12454636f;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 100.0;
  expected.matrix[0][0] = -3.3f;
  expected.matrix[0][1] = 6.37363908f;
  expected.matrix[1][0] = 0.0;
  expected.matrix[1][1] = -300.0;
  multiply_number_tc(&A, -3, &expected, OK);

#test mult_matrix_1
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(3, 2, &A);
  s21_create_matrix(2, 3, &B);
  s21_create_matrix(3, 3, &expected);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 5.0;
  A.matrix[2][0] = 3.0;
  A.matrix[2][1] = 6.0;
  B.matrix[0][0] = 1.0;
  B.matrix[0][1] = -1.0;
  B.matrix[0][2] = 1.0;
  B.matrix[1][0] = 2.0;
  B.matrix[1][1] = 3.0;
  B.matrix[1][2] = 4.0;
  expected.matrix[0][0] = 9.0;
  expected.matrix[0][1] = 11.0;
  expected.matrix[0][2] = 17.0;
  expected.matrix[1][0] = 12.0;
  expected.matrix[1][1] = 13.0;
  expected.matrix[1][2] = 22.0;
  expected.matrix[2][0] = 15.0;
  expected.matrix[2][1] = 15.0;
  expected.matrix[2][2] = 27.0;

  mul_tc(&A, &B, &expected, OK);

#test mult_matrix_2
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};

  s21_create_matrix(3, 3, &A);
  s21_create_matrix(3, 3, &B);
  s21_create_matrix(3, 3, &expected);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 5.0;
  A.matrix[1][2] = 6.0;
  A.matrix[2][0] = 7.0;
  A.matrix[2][1] = 8.0;
  A.matrix[2][2] = 9.0;
  expected.matrix[0][0] = 0.0;
  expected.matrix[0][1] = 0.0;
  expected.matrix[0][2] = 0.0;
  expected.matrix[1][0] = 0.0;
  expected.matrix[1][1] = 0.0;
  expected.matrix[1][1] = 0.0;
  expected.matrix[2][0] = 0.0;
  expected.matrix[2][1] = 0.0;
  expected.matrix[2][2] = 0.0;
  mul_tc(&A, &B, &expected, OK);

#test mult_matrix_3
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  s21_create_matrix(1, 1, &A);
  s21_create_matrix(3, 4, &B);
  mul_tc(&A, &B, NULL, CALCULATION_ERROR);

#test mult_matrix_4
  matrix_t A = (matrix_t){0};
  matrix_t B = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(2, 3, &A);
  s21_create_matrix(3, 4, &B);
  s21_create_matrix(2, 4, &expected);
  A.matrix[0][0] = 2.2;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 1.0;
  B.matrix[0][0] = 0.0;
  B.matrix[0][1] = 3.0;
  B.matrix[0][2] = 4.0;
  B.matrix[0][3] = 5.0;
  B.matrix[1][0] = 2.0;
  B.matrix[1][1] = 5.0;
  B.matrix[1][2] = 6.0;
  B.matrix[1][3] = 7.0;
  B.matrix[2][0] = 8.0;
  B.matrix[2][1] = 7.0;
  B.matrix[2][2] = 5.0;
  B.matrix[2][3] = 43.0;
  expected.matrix[0][0] = 28.0;
  expected.matrix[0][1] = 37.6;
  expected.matrix[0][2] = 35.8;
  expected.matrix[0][3] = 154.0;
  expected.matrix[1][0] = 16.0;
  expected.matrix[1][1] = 27.0;
  expected.matrix[1][2] = 29.0;
  expected.matrix[1][3] = 71.0;
  mul_tc(&A, &B, &expected, OK);

#test determinant_1
  matrix_t A = (matrix_t){0};
  s21_create_matrix(1, 1, &A);
  A.matrix[0][0] = -48.0;
  determinant_tc(&A, -48, OK);

#test determinant_2
  matrix_t A = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[1][0] = 3.0;
  A.matrix[1][1] = 4.0;
  determinant_tc(&A, -2, OK);

#test determinant_3
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 5.0;
  A.matrix[1][2] = 6.0;
  A.matrix[2][0] = 7.0;
  A.matrix[2][1] = 8.0;
  A.matrix[2][2] = 9.0;
  determinant_tc(&A, 0, OK);

#test determinant_4
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 10.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 5.0;
  A.matrix[1][2] = 6.0;
  A.matrix[2][0] = 7.0;
  A.matrix[2][1] = 8.0;
  A.matrix[2][2] = 9.0;
  determinant_tc(&A, -27, OK);

#test determinant_6
  matrix_t A = (matrix_t){0};
  s21_create_matrix(1, 2, &A);
  determinant_tc(&A, 0, CALCULATION_ERROR);

#test determinant_7
  matrix_t A = (matrix_t){0};
  s21_create_matrix(4, 4, &A);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 4.0;
  A.matrix[0][2] = 1.0;
  A.matrix[0][3] = 1.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 2.0;
  A.matrix[1][2] = 1.0;
  A.matrix[1][3] = 0.0;
  A.matrix[2][0] = 2.0;
  A.matrix[2][1] = 1.0;
  A.matrix[2][2] = 1.0;
  A.matrix[2][3] = 3.0;
  A.matrix[3][0] = 4.0;
  A.matrix[3][1] = 0.0;
  A.matrix[3][2] = 2.0;
  A.matrix[3][3] = 3.0;
  determinant_tc(&A, -26, OK);

#test determinant_8
  matrix_t A = (matrix_t){0};
  s21_create_matrix(5, 5, &A);
  A.matrix[0][0] = 4.1;
  A.matrix[0][1] = 1.2;
  A.matrix[0][2] = 1.3;
  A.matrix[0][3] = 2.4;
  A.matrix[0][4] = 1.5;
  A.matrix[1][0] = 1.1;
  A.matrix[1][1] = 2.2;
  A.matrix[1][2] = -1.3;
  A.matrix[1][3] = 1.4;
  A.matrix[1][4] = 1.5;
  A.matrix[2][0] = 3.1;
  A.matrix[2][1] = 1.2;
  A.matrix[2][2] = 1.3;
  A.matrix[2][3] = 1.4;
  A.matrix[2][4] = 1.5;
  A.matrix[3][0] = 2.1;
  A.matrix[3][1] = 1.2;
  A.matrix[3][2] = 1.3;
  A.matrix[3][3] = 4.4;
  A.matrix[3][4] = 1.5;
  A.matrix[4][0] = 2.1;
  A.matrix[4][1] = -1.2;
  A.matrix[4][2] = 1.3;
  A.matrix[4][3] = 1.4;
  A.matrix[4][4] = 5.5;
  determinant_tc(&A, 108.16, OK);

#test determinant_9
  matrix_t A = (matrix_t){0};
  s21_create_matrix(1, 0, &A);
  determinant_tc(&A, 0, INCORRECT_MATRIX);

#test inverse_matrix_1
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 5.0;
  A.matrix[0][2] = 7.0;
  A.matrix[1][0] = 6.0;
  A.matrix[1][1] = 3.0;
  A.matrix[1][2] = 4.0;
  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = -2.0;
  A.matrix[2][2] = -3.0;
  s21_create_matrix(3, 3, &expected);
  expected.matrix[0][0] = 1.0;
  expected.matrix[0][1] = -1.0;
  expected.matrix[0][2] = 1.0;
  expected.matrix[1][0] = -38.0;
  expected.matrix[1][1] = 41.0;
  expected.matrix[1][2] = -34.0;
  expected.matrix[2][0] = 27.0;
  expected.matrix[2][1] = -29.0;
  expected.matrix[2][2] = 24.0;
  inverse_tc(&A, &expected, OK);

#test inverse_matrix_2
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(2, 2, &A);
  A.matrix[0][0] = 2.1;
  A.matrix[0][1] = 5.2;
  A.matrix[1][0] = 6.1;
  A.matrix[1][1] = 3.2;
  s21_create_matrix(2, 2, &expected);
  expected.matrix[0][0] = -0.128;
  expected.matrix[0][1] = 0.208;
  expected.matrix[1][0] = 0.244;
  expected.matrix[1][1] = -0.084;
  inverse_tc(&A, &expected, OK);

#test inverse_matrix_3
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(4, 4, &A);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 1.0;
  A.matrix[0][2] = 1.0;
  A.matrix[0][3] = 1.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 2.0;
  A.matrix[1][2] = 1.0;
  A.matrix[1][3] = 0.0;
  A.matrix[2][0] = 2.0;
  A.matrix[2][1] = 1.0;
  A.matrix[2][2] = 1.0;
  A.matrix[2][3] = 3.0;
  A.matrix[3][0] = 4.0;
  A.matrix[3][1] = 0.0;
  A.matrix[3][2] = 2.0;
  A.matrix[3][3] = 1.0;
  s21_create_matrix(4, 4, &expected);
  expected.matrix[0][0] = 1.375;
  expected.matrix[0][1] = -0.5;
  expected.matrix[0][2] = -0.375;
  expected.matrix[0][3] = -0.25;
  expected.matrix[1][0] = 1.25;
  expected.matrix[1][1] = 0;
  expected.matrix[1][2] = -0.25;
  expected.matrix[1][3] = -0.5;
  expected.matrix[2][0] = -2.5;
  expected.matrix[2][1] = 1;
  expected.matrix[2][2] = 0.5;
  expected.matrix[2][3] = 1;
  expected.matrix[3][0] = -0.5;
  expected.matrix[3][1] = 0;
  expected.matrix[3][2] = 0.5;
  expected.matrix[3][3] = 0;
  inverse_tc(&A, &expected, OK);

#test inverse_matrix_4
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 1.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 4.0;
  A.matrix[1][1] = 3.0;
  A.matrix[1][2] = 1.0;
  A.matrix[2][0] = 2.0;
  A.matrix[2][1] = 3.0;
  A.matrix[2][2] = 1.0;
  s21_create_matrix(3, 3, &expected);
  expected.matrix[0][0] = 0;
  expected.matrix[0][1] = 0.5;
  expected.matrix[0][2] = -0.5;
  expected.matrix[1][0] = -0.125;
  expected.matrix[1][1] = -0.25;
  expected.matrix[1][2] = 0.625;
  expected.matrix[2][0] = 0.375;
  expected.matrix[2][1] = -0.25;
  expected.matrix[2][2] = 0.125;
  inverse_tc(&A, &expected, OK);

#test inverse_matrix_5
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 2, &A);
  inverse_tc(&A, NULL, CALCULATION_ERROR);

#test inverse_matrix_6
  matrix_t A = (matrix_t){0};
  s21_create_matrix(3, 0, &A);
  inverse_tc(&A, NULL, INCORRECT_MATRIX);

#test complements_1
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(3, 3, &A);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 2.0;
  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = 2.0;
  A.matrix[2][2] = 1.0;
  s21_create_matrix(3, 3, &expected);
  expected.matrix[0][0] = 0.0;
  expected.matrix[0][1] = 10.0;
  expected.matrix[0][2] = -20.0;
  expected.matrix[1][0] = 4.0;
  expected.matrix[1][1] = -14.0;
  expected.matrix[1][2] = 8.0;
  expected.matrix[2][0] = -8.0;
  expected.matrix[2][1] = -2.0;
  expected.matrix[2][2] = 4.0;
  complements_tc(&A, &expected, OK);

#test complements_2
  matrix_t A = (matrix_t){0};
  s21_create_matrix(0, 3, &A); 
  complements_tc(&A, NULL, INCORRECT_MATRIX);

#test complements_3
  matrix_t A = (matrix_t){0};
  matrix_t expected = (matrix_t){0};
  s21_create_matrix(2, 3, &A);
  complements_tc(&A, &expected, CALCULATION_ERROR);
